name: 'Kustomize Smart Deploy'
description: 'Complete kustomize deployment with GitOps detection and metadata extraction'
author: 'KoalaOps'

branding:
  icon: 'package'
  color: 'purple'

inputs:
  working_directory:
    description: 'Working directory for operations'
    required: false
    default: '.'
  overlay_dir:
    description: 'Path to kustomize overlay directory (relative to working_directory)'
    required: true
  service_name:
    description: 'Service name'
    required: true
  image:
    description: 'Full image with tag (e.g., myregistry/myapp:v1.2.3)'
    required: true
  environment:
    description: 'Environment name'
    required: true
  actor:
    description: 'User deploying (defaults to github.actor)'
    required: false
    default: ''
  run_id:
    description: 'Run ID for tracking (defaults to github.run_id)'
    required: false
    default: ''
  detect_gitops:
    description: 'Auto-detect GitOps mode from manifests'
    required: false
    default: 'true'
  force_mode:
    description: 'Force deployment mode (gitops, kubectl, or auto)'
    required: false
    default: 'auto'
  commit_message:
    description: 'Commit message for GitOps (has defaults)'
    required: false
  create_namespace:
    description: 'Create namespace if it does not exist'
    required: false
    default: 'true'
  wait_timeout:
    description: 'Timeout for waiting on deployments (seconds)'
    required: false
    default: '120'

outputs:
  mode:
    description: 'Deployment mode used (gitops or kubectl)'
    value: ${{ steps.mode.outputs.mode }}
  namespace:
    description: 'Kubernetes namespace'
    value: ${{ steps.inspect.outputs.namespace }}
  deployment:
    description: 'Primary deployment name'
    value: ${{ steps.inspect.outputs.primary_deployment }}
  managed_by:
    description: 'Value of managed-by label if found'
    value: ${{ steps.detect.outputs.managed_by }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [ ! -d "${{ inputs.working_directory }}/${{ inputs.overlay_dir }}" ]; then
          echo "::error::Overlay directory not found: ${{ inputs.working_directory }}/${{ inputs.overlay_dir }}"
          exit 1
        fi
        
        if [ ! -f "${{ inputs.working_directory }}/${{ inputs.overlay_dir }}/kustomization.yaml" ]; then
          echo "::error::No kustomization.yaml found in overlay directory"
          exit 1
        fi
    
    - name: Update kustomize manifests
      uses: KoalaOps/kustomize-edit@v1
      with:
        overlay_dir: ${{ inputs.working_directory }}/${{ inputs.overlay_dir }}
        image: ${{ inputs.image }}
        version_label: ${{ inputs.image }}
        annotations: |
          last-deployed-by=${{ inputs.actor || github.actor }}
          deployment-timestamp=${{ github.event.head_commit.timestamp || github.run_id }}
          deployment-id=${{ inputs.run_id || github.run_id }}
          build.run.url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    
    - name: Inspect kustomization
      id: inspect
      uses: KoalaOps/kustomize-inspect@v1
      with:
        overlay_dir: ${{ inputs.working_directory }}/${{ inputs.overlay_dir }}
    
    - name: Detect GitOps mode
      id: detect
      if: ${{ inputs.force_mode == 'auto' && inputs.detect_gitops == 'true' }}
      shell: bash
      working-directory: ${{ inputs.working_directory }}/${{ inputs.overlay_dir }}
      run: |
        echo "Detecting deployment mode..."
        
        BUILD_RESULT=$(kustomize build)
        MANAGED_BY=$(echo "$BUILD_RESULT" | grep "app.kubernetes.io/managed-by:" | head -n1 | sed 's/.*app.kubernetes.io\/managed-by:\s*//' | tr -d '[:space:]')
        
        echo "managed_by=$MANAGED_BY" >> $GITHUB_OUTPUT
        
        if [ "$MANAGED_BY" = "argocd" ]; then
          echo "mode=gitops" >> $GITHUB_OUTPUT
          echo " GitOps mode detected (ArgoCD)"
        elif [ "$MANAGED_BY" = "flux" ]; then
          echo "mode=gitops" >> $GITHUB_OUTPUT
          echo " GitOps mode detected (Flux)"
        else
          echo "mode=kubectl" >> $GITHUB_OUTPUT
          echo "=> Direct deployment mode (kubectl)"
        fi
    
    - name: Set deployment mode
      id: mode
      shell: bash
      run: |
        if [ "${{ inputs.force_mode }}" != "auto" ]; then
          echo "mode=${{ inputs.force_mode }}" >> $GITHUB_OUTPUT
          echo "<> Using forced mode: ${{ inputs.force_mode }}"
        else
          echo "mode=${{ steps.detect.outputs.mode }}" >> $GITHUB_OUTPUT
        fi
    
    # GitOps path: commit changes
    - name: Commit changes for GitOps
      if: ${{ steps.mode.outputs.mode == 'gitops' }}
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        repository: ${{ inputs.working_directory }}
        commit_message: |
          ${{ inputs.commit_message || format('Deploy {0} {1} to {2} [skip ci]', inputs.service_name, inputs.image, inputs.environment) }}
        file_pattern: '${{ inputs.overlay_dir }}/*'
        commit_user_name: GitHub Actions Bot
        commit_user_email: actions@github.com
    
    # Kubectl path: direct apply
    - name: Apply with kubectl
      if: ${{ steps.mode.outputs.mode == 'kubectl' }}
      uses: KoalaOps/kustomize-apply@v1
      with:
        overlay_dir: ${{ inputs.working_directory }}/${{ inputs.overlay_dir }}
        namespace: ${{ steps.inspect.outputs.namespace }}
        workloads_json: ${{ steps.inspect.outputs.workloads_json }}
        wait: 'true'
        wait_timeout: ${{ inputs.wait_timeout }}